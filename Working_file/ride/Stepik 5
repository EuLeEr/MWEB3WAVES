{-# STDLIB_VERSION 3 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let Ass = base58'J4uYaszzBAU1n8W7eMkrRXKcKhvQuTYXgzwLboiUHX8N'

@Callable(i) 

func deposit() = {
    let pmt = extract(i.payment)
    if ( pmt.assetId != Ass) then throw("Only J4uYaszzBAU1n8W7eMkrRXKcKhvQuTYXgzwLboiUHX8N token")
    else {
        let currentkey = toBase58String(i.caller.bytes)
        let currentAmount = match  getInteger(this, currentkey){
            case a:Int => a
            case _ => 0
        }
        let newAmount = currentAmount + pmt.amount
        WriteSet([DataEntry(currentkey, currentAmount)])
        
    }
}
@Callable(i)
func withdraw(amount : Int) = {

    let currentkey = toBase58String(i.caller.bytes)
            let currentAmount = match  getInteger(this, currentkey){
            case a:Int => a
            case _ => 0
        }
        let newAmount = currentAmount - amount 
        if (amount < 0) then throw("Can't withdraw negative amount")
        else if (newAmount < 0)then throw("Negative balance")
        else ScriptResult(
            WriteSet([DataEntry(currentkey, newAmount)]),
            TransferSet([ScriptTransfer(i.caller,amount,Ass)])
        ) 
}